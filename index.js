// –ü–æ–¥–∞–≤–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (–Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏)
process.removeAllListeners('warning');

require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const express = require('express');

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤ –∏–∑ –ø–∞–ø–∫–∏
const fs = require('fs');
const path = require('path');

const parsers = {};
const parsersDir = path.join(__dirname, 'parsers');

fs.readdirSync(parsersDir).forEach(file => {
  if (file.endsWith('Parser.js') || file.endsWith('parser.js')) {
    const name = file.replace(/Parser.js$/i, '').toLowerCase();
    parsers[name] = require(path.join(parsersDir, file));
  }
});

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
const app = express();

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
const delay = (ms, reason = '') => {
  console.log(`[DELAY] ${ms}ms ${reason}`);
  return new Promise(resolve => setTimeout(resolve, ms));
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
const extractSearchQuery = (text) => {
  const match = text.match(/\/search\s+(.+)|–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:\s*"(.+)"/);
  return match ? (match[1] || match[2]).trim() : '';
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤
function getPlatformButtons() {
  const buttons = [];
  const parserNames = Object.keys(parsers);

  // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Ä—è–¥—ã –ø–æ 2 –∫–Ω–æ–ø–∫–∏
  for (let i = 0; i < parserNames.length; i += 2) {
    const row = parserNames.slice(i, i + 2).map(name => 
      Markup.button.callback(
        name.charAt(0).toUpperCase() + name.slice(1), // –ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è
        name
      )
    );
    buttons.push(row);
  }

  buttons.push([Markup.button.callback('–í—Å–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã', 'all')]);

  return Markup.inlineKeyboard(buttons);
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É OAuth callback
app.get('/auth', async (req, res) => {
  try {
    const { code, state } = req.query;

    if (!code) {
      return res.status(400).send('Authorization code missing');
    }

    await parsers.avito.handleCallback(code);
    res.send('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Avito –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞—Ä—Å–µ—Ä.');
  } catch (error) {
    console.error('Auth callback error:', error);
    res.status(500).send('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
  }
});

// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ Avito —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
bot.action('avito', async (ctx) => {
  const query = extractSearchQuery(ctx.callbackQuery.message.text);

  if (!(await parsers.avito.hasValidToken())) {
    const authUrl = parsers.avito.getAuthUrl();
    return ctx.replyWithMarkdown(
      `üîê –î–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ Avito —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:\n\n` +
      `[–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è](${authUrl})\n\n` +
      `–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "Avito" —Å–Ω–æ–≤–∞.`,
      Markup.inlineKeyboard([
        Markup.button.callback('–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫', 'avito')
      ])
    );
  }

  await ctx.answerCbQuery(`–ò—â–µ–º –Ω–∞ Avito...`);
  await performSearch(ctx, query, 'avito');
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Avito
bot.command('auth_avito', (ctx) => {
  const authUrl = parsers.avito.getAuthUrl();
  ctx.replyWithMarkdown(
    `üîë –î–ª—è —Ä–∞–±–æ—Ç—ã —Å Avito API –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è:\n\n` +
    `[–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏](${authUrl})\n\n` +
    `–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –Ω–∞ Avito.`
  );
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ Avito
bot.command('avito_status', (ctx) => {
  const config = parsers.avito.checkConfig();
  ctx.replyWithMarkdown(
    `‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Avito API:\n` +
    `- Client ID: ${config.clientId ? '‚úÖ' : '‚ùå'}\n` +
    `- Client Secret: ${config.clientSecret ? '‚úÖ' : '‚ùå'}\n` +
    `- Redirect URI: ${config.redirectUri ? '‚úÖ' : '‚ö†Ô∏è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)'}\n` +
    `\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: ${config.allRequired ? '–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ' : '–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞'}`
  );
});

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
Object.keys(parsers).forEach(platform => {
  if (platform !== 'avito') { // –î–ª—è avito —É–∂–µ –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    bot.action(platform, async (ctx) => {
      const query = extractSearchQuery(ctx.callbackQuery.message.text);
      await ctx.answerCbQuery(`–ò—â–µ–º –Ω–∞ ${platform}...`);
      await performSearch(ctx, query, platform);
    });
  }
});

bot.action('all', async (ctx) => {
  const query = extractSearchQuery(ctx.callbackQuery.message.text);
  await ctx.answerCbQuery('–ò—â–µ–º –Ω–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö...');
  await performSearch(ctx, query);
});

// –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫–∞
bot.command('search', async (ctx) => {
  const query = extractSearchQuery(ctx.message.text);

  if (!query) {
    return ctx.replyWithMarkdown('‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã `/search`\n*–ü—Ä–∏–º–µ—Ä:* `/search iPhone 13`');
  }

  await ctx.replyWithChatAction('typing');
  await delay(500); // –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è UX

  try {
    await ctx.replyWithMarkdown(
      `üîç –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –ø–æ–∏—Å–∫–∞: *"${query}"*`,
      getPlatformButtons()
    );
  } catch (error) {
    console.error('Search command error:', error);
    ctx.replyWithMarkdown('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
  }
});

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞
async function performSearch(ctx, query, platform = null) {
  try {
    await ctx.replyWithChatAction('typing');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –¥–ª—è Avito
    if (platform === 'avito' && !(await parsers.avito.hasValidToken())) {
      const authUrl = parsers.avito.getAuthUrl();
      return ctx.replyWithMarkdown(
        `üîê –î–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ Avito —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:\n\n` +
        `[–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è](${authUrl})\n\n` +
        `–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∏—Å–∫.`
      );
    }

    const platformsToSearch = platform ? { [platform]: parsers[platform] } : parsers;
    const allResults = [];
    const startTime = Date.now();

    for (const [name, parser] of Object.entries(platformsToSearch)) {
      try {
        console.log(`[PARSER] Starting ${name} for "${query}"`);
        const results = await parser.parse(query);
        allResults.push(...results);
        console.log(`[PARSER] ${name} found ${results.length} items`);

        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        await delay(results.length > 0 ? 1000 : 500, `${name} delay`);
      } catch (e) {
        console.error(`[PARSER ERROR] ${name}:`, e.message);
      }
    }

    const duration = (Date.now() - startTime) / 1000;
    console.log(`[SEARCH] Completed in ${duration}s, found ${allResults.length} total`);

    if (allResults.length === 0) {
      return ctx.replyWithMarkdown(
        `üîé –ü–æ –∑–∞–ø—Ä–æ—Å—É *"${query}"* –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n` +
        `*–°–æ–≤–µ—Ç—ã:*\n` +
        `- –£–ø—Ä–æ—Å—Ç–∏—Ç–µ –∑–∞–ø—Ä–æ—Å\n` +
        `- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é\n` +
        `- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ [–≤—Ä—É—á–Ω—É—é –Ω–∞ Avito](${`https://www.avito.ru/all?q=${encodeURIComponent(query)}`})`
      );
    }

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const bySource = allResults.reduce((acc, item) => {
      acc[item.source] = acc[item.source] || [];
      acc[item.source].push(item);
      return acc;
    }, {});

    let totalSent = 0;
    for (const [source, items] of Object.entries(bySource)) {
      if (totalSent >= 15) break; // –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π

      const limitedItems = items.slice(0, 5);
      totalSent += limitedItems.length;

      let message = `üè¨ *${source}* (–Ω–∞–π–¥–µ–Ω–æ: ${items.length})\n\n`;
      message += limitedItems.map(item => (
        `üîπ *${item.title}*\n` +
        `üí∞ ${item.price || '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
        (item.inStock !== undefined ? `üì¶ ${item.inStock ? '‚úÖ –í –Ω–∞–ª–∏—á–∏–∏' : '‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'}\n` : '') +
        `üîó [–û—Ç–∫—Ä—ã—Ç—å](${item.url})\n`
      )).join('\n');

      await ctx.replyWithMarkdown(message, { 
        disable_web_page_preview: true,
        disable_notification: true
      });
      await delay(300);
    }

  } catch (error) {
    console.error('[SEARCH ERROR]', error);
    await ctx.replyWithMarkdown('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–∏—Å–∫–∞
bot.start((ctx) => ctx.replyWithMarkdown(
  `üõçÔ∏è *–£–º–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤*\n\n` +
  `–Ø –º–æ–≥—É –∏—Å–∫–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –Ω–∞ ${Object.keys(parsers).length} –ø–ª–æ—â–∞–¥–∫–∞—Ö:\n` +
  `${Object.keys(parsers).map(p => `‚Ä¢ ${p.charAt(0).toUpperCase() + p.slice(1)}`).join('\n')}\n\n` +
  `üîç *–ö–∞–∫ –∏—Å–∫–∞—Ç—å:*\n` +
  `1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n` +
  `2. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å\n` +
  `3. –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—â–∞–¥–∫–∏\n\n` +
  `*–ü—Ä–∏–º–µ—Ä:* "–ù–æ—É—Ç–±—É–∫ ASUS ROG"`,
  Markup.keyboard(['üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫']).resize()
));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è "üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫"
bot.hears('üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫', (ctx) => 
  ctx.replyWithMarkdown('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É `/search [–∑–∞–ø—Ä–æ—Å]`\n*–ü—Ä–∏–º–µ—Ä:* `/search iPhone 13`'));

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ Server running on port ${PORT}`);
  bot.launch()
    .then(() => console.log('ü§ñ Bot started successfully'))
    .catch(err => console.error('üí• Bot launch error:', err));
});

// –ì—Ä–∞—Ü–∏–æ–∑–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
process.once('SIGINT', () => {
  console.log('üõë Stopping bot...');
  bot.stop('SIGINT');
  process.exit();
});

process.once('SIGTERM', () => {
  console.log('üõë Terminating bot...');
  bot.stop('SIGTERM');
  process.exit();
});
